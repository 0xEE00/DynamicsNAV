OBJECT Codeunit 60010 DocuSign Management
{
  OBJECT-PROPERTIES
  {
    Date=02-05-16;
    Time=12:00:00;
    Modified=Yes;
    Version List=WebService-Example;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE RequestSign@1000000000(RecipientEmail@1000000003 : Text;RecipientName@1000000002 : Text;DocumentPath@1000000001 : Text;FileName@1000000000 : Text) : Text;
    VAR
      ApiClient@1000000004 : DotNet "'DocuSign.eSign, Version=2.0.0.0, Culture=neutral, PublicKeyToken=7fca6fcbbc219ede'.DocuSign.eSign.Client.ApiClient";
      Configuration@1000000005 : DotNet "'DocuSign.eSign, Version=2.0.0.0, Culture=neutral, PublicKeyToken=7fca6fcbbc219ede'.DocuSign.eSign.Client.Configuration";
      Document@1000000014 : DotNet "'DocuSign.eSign, Version=2.0.0.0, Culture=neutral, PublicKeyToken=7fca6fcbbc219ede'.DocuSign.eSign.Model.Document";
      EnvelopeDefinition@1000000010 : DotNet "'DocuSign.eSign, Version=2.0.0.0, Culture=neutral, PublicKeyToken=7fca6fcbbc219ede'.DocuSign.eSign.Model.EnvelopeDefinition";
      Signer@1000000019 : DotNet "'DocuSign.eSign, Version=2.0.0.0, Culture=neutral, PublicKeyToken=7fca6fcbbc219ede'.DocuSign.eSign.Model.Signer";
      SignHere@1000000021 : DotNet "'DocuSign.eSign, Version=2.0.0.0, Culture=neutral, PublicKeyToken=7fca6fcbbc219ede'.DocuSign.eSign.Model.SignHere";
      Recipients@1000000022 : DotNet "'DocuSign.eSign, Version=2.0.0.0, Culture=neutral, PublicKeyToken=7fca6fcbbc219ede'.DocuSign.eSign.Model.Recipients";
      Tabs@1000000020 : DotNet "'DocuSign.eSign, Version=2.0.0.0, Culture=neutral, PublicKeyToken=7fca6fcbbc219ede'.DocuSign.eSign.Model.Tabs";
      EnvelopesApi@1000000023 : DotNet "'DocuSign.eSign, Version=2.0.0.0, Culture=neutral, PublicKeyToken=7fca6fcbbc219ede'.DocuSign.eSign.Api.EnvelopesApi";
      EnvelopeSummary@1000000024 : DotNet "'DocuSign.eSign, Version=2.0.0.0, Culture=neutral, PublicKeyToken=7fca6fcbbc219ede'.DocuSign.eSign.Model.EnvelopeSummary";
      CreateEnvelopeOptions@1000000025 : DotNet "'DocuSign.eSign, Version=2.0.0.0, Culture=neutral, PublicKeyToken=7fca6fcbbc219ede'.DocuSign.eSign.Api.EnvelopesApi+CreateEnvelopeOptions";
      SystemIOFile@1000000017 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      ByteArray@1000000016 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      List@1000000018 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      SystemConvert@1000000015 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      Exception@1000000006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Exception";
      AccountId@1000000012 : Text;
    BEGIN
      ApiClient := ApiClient.ApiClient('https://demo.docusign.net/restapi');
      Configuration := Configuration.Configuration(ApiClient);

      IF NOT LoginApi(Configuration,AccountId) THEN BEGIN
        Exception := GETLASTERROROBJECT;
        ERROR('Could not login to DocuSign!\\The returned errormessage was:\%1',Exception.Message);
      END;

      // Create a new envelope
      EnvelopeDefinition := EnvelopeDefinition.EnvelopeDefinition();
      EnvelopeDefinition.EmailSubject := 'Sample Signature Request';

      // Add a document to the envelope
      ByteArray := SystemIOFile.ReadAllBytes(DocumentPath);
      Document := Document.Document;
      Document.DocumentBase64 := SystemConvert.ToBase64String(ByteArray);
      Document.Name := FileName;
      Document.DocumentId := '1';

      CreateInstanceOfGenericType(List,Document);
      EnvelopeDefinition.Documents := List;
      EnvelopeDefinition.Documents.Add(Document);

      // Add a recipient to sign the documeent
      Signer := Signer.Signer;
      Signer.Email := RecipientEmail;
      Signer.Name := RecipientName;
      Signer.RecipientId := '1';

      // Create a |SignHere| tab somewhere on the document for the recipient to sign
      Signer.Tabs := Tabs.Tabs;
      CreateInstanceOfGenericType(List,SignHere);
      Signer.Tabs.SignHereTabs := List;
      SignHere := SignHere.SignHere;
      SignHere.DocumentId := '1';
      SignHere.PageNumber := '1';
      SignHere.RecipientId := '1';
      SignHere.XPosition := '480';
      SignHere.YPosition := '700';
      Signer.Tabs.SignHereTabs.Add(SignHere);

      EnvelopeDefinition.Recipients := Recipients.Recipients;
      CreateInstanceOfGenericType(List,Signer);
      EnvelopeDefinition.Recipients.Signers := List;
      EnvelopeDefinition.Recipients.Signers.Add(Signer);

      // set envelope status to "sent" to immediately send the signature request
      EnvelopeDefinition.Status := 'sent';

      // |EnvelopesApi| contains methods related to creating and sending Envelopes (aka signature requests)
      EnvelopesApi := EnvelopesApi.EnvelopesApi(Configuration);
      EnvelopeSummary := EnvelopesApi.CreateEnvelope(AccountId, EnvelopeDefinition,CreateEnvelopeOptions.CreateEnvelopeOptions);
      EXIT(EnvelopeSummary.EnvelopeId);
    END;

    [TryFunction]
    LOCAL PROCEDURE LoginApi@1000000001(VAR Configuration@1000000000 : DotNet "'DocuSign.eSign, Version=2.0.0.0, Culture=neutral, PublicKeyToken=7fca6fcbbc219ede'.DocuSign.eSign.Client.Configuration";VAR Accountid@1000000001 : Text);
    VAR
      DocuSignSetup@1000000003 : Record 60010;
      AuthenticationApi@1000000004 : DotNet "'DocuSign.eSign, Version=2.0.0.0, Culture=neutral, PublicKeyToken=7fca6fcbbc219ede'.DocuSign.eSign.Api.AuthenticationApi";
      LoginInformation@1000000006 : DotNet "'DocuSign.eSign, Version=2.0.0.0, Culture=neutral, PublicKeyToken=7fca6fcbbc219ede'.DocuSign.eSign.Model.LoginInformation";
      LoginAccount@1000000005 : DotNet "'DocuSign.eSign, Version=2.0.0.0, Culture=neutral, PublicKeyToken=7fca6fcbbc219ede'.DocuSign.eSign.Model.LoginAccount";
      LoginOptions@1000000007 : DotNet "'DocuSign.eSign, Version=2.0.0.0, Culture=neutral, PublicKeyToken=7fca6fcbbc219ede'.DocuSign.eSign.Api.AuthenticationApi+LoginOptions";
      AuthHeader@1000000002 : Text;
    BEGIN
      DocuSignSetup.GET;
      DocuSignSetup.TESTFIELD("User Name");
      DocuSignSetup.TESTFIELD("Password Key");
      DocuSignSetup.TESTFIELD("API Key");

      AuthHeader := STRSUBSTNO('{"Username":"%1", "Password":"%2", "IntegratorKey":"%3"}',
                               DocuSignSetup."User Name",
                               DocuSignSetup.GetPassword,
                               DocuSignSetup.GetAPIKey);
      Configuration.AddDefaultHeader('X-DocuSign-Authentication',AuthHeader);

      AuthenticationApi := AuthenticationApi.AuthenticationApi(Configuration);
      LoginInformation := AuthenticationApi.Login(LoginOptions.LoginOptions);

      FOREACH LoginAccount IN LoginInformation.LoginAccounts DO BEGIN
        IF LoginAccount.IsDefault = 'true' THEN BEGIN
          Accountid := LoginAccount.AccountId;
          BREAK;
        END;
      END;

      IF Accountid = '' THEN BEGIN
        LoginAccount := LoginInformation.LoginAccounts.Item(0);
        Accountid := LoginAccount.AccountId;
      END;
    END;

    LOCAL PROCEDURE CreateInstanceOfGenericType@1000000008(VAR Object@1000000001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";T@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object");
    VAR
      DotNetType@1000000005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      GenericType@1000000007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      DotNetArray@1000000004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Activator@1000000002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Activator";
    BEGIN
      DotNetArray := DotNetArray.CreateInstance(GETDOTNETTYPE(DotNetType),1);
      DotNetArray.SetValue(GETDOTNETTYPE(T),0);

      GenericType := GETDOTNETTYPE(Object);
      DotNetType := GenericType.MakeGenericType(DotNetArray);
      Object := Activator.CreateInstance(DotNetType);
    END;

    [EventSubscriber(Table,1400,OnRegisterServiceConnection)]
    LOCAL PROCEDURE HandleDocuSignRegisterServiceConnection@14(VAR ServiceConnection@1000 : Record 1400);
    VAR
      DocuSignSetup@1001 : Record 60010;
      RecRef@1002 : RecordRef;
    BEGIN
      IF NOT DocuSignSetup.GET THEN BEGIN
        IF NOT DocuSignSetup.WRITEPERMISSION THEN
          EXIT;
        DocuSignSetup.INIT;
        DocuSignSetup.INSERT;
      END;

      RecRef.GETTABLE(DocuSignSetup);

      ServiceConnection.Status := ServiceConnection.Status::Enabled;
      IF (DocuSignSetup."User Name" = '') OR ISNULLGUID(DocuSignSetup."Password Key") OR ISNULLGUID(DocuSignSetup."API Key") THEN
        ServiceConnection.Status := ServiceConnection.Status::Disabled;

      WITH DocuSignSetup DO
        ServiceConnection.InsertServiceConnection(
          ServiceConnection,RecRef.RECORDID,TABLECAPTION,'',PAGE::"DocuSign Setup");
    END;

    BEGIN
    END.
  }
}

